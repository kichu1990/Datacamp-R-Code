# The getSymbols() function from the quantmod package provides a consistent interface to import data from various sources into your 
# workspace. By default, getSymbols() imports the data as a xts object.

# Load the quantmod package
library(quantmod)

# Import QQQ data from Yahoo! Finance
getSymbols("QQQ")

# Look at the structure of the object getSymbols created
str(QQQ)

# Look at the first few rows of QQQ
head(QQQ)

# getSymbols() imports data from Yahoo! Finance by default because src = "yahoo" by default

# Import QQQ data from Alpha Vantage
getSymbols("QQQ",src="av")

# Look at the structure of QQQ
str(QQQ)

# Import GDP data from FRED
getSymbols("GDP",src="FRED")

# Look at the structure of GDP
str(GDP)

# getSymbols() automatically created an object named like the symbol you provided.

# Assign SPY data to 'spy' using auto.assign argument
spy <- getSymbols("SPY",auto.assign = FALSE)

# Look at the structure of the 'spy' object
str(spy)

# Assign JNJ data to 'jnj' using env argument
jnj <- getSymbols("JNJ",env = NULL)

# Look at the structure of the 'jnj' object
str(jnj)

# Turning off auto.assign is useful if you want to assign the data to an object yourself.
# getSymbols() uses the Symbols and src arguments to specify the instrument and data source, respectively. The Quandl() function 
# specifies both the data source and the instrument via its code argument, in the form "DATABASE/DATASET".
# Quandl() returns a data.frame by default.
# Quandl() will not automatically assign the data to an object.
# Load the Quandl package
library(Quandl)

# Import GDP data from FRED
gdp <- Quandl("FRED/GDP")

# Look at the structure of the object returned by Quandl
str(gdp)

# The Quandl() function returns a data.frame by default. It can return other classes via the type argument.
# Import GDP data from FRED as xts
gdp_xts <- Quandl("FRED/GDP",type="xts")

# Look at the structure of gdp_xts
str(gdp_xts)

# Import GDP data from FRED as zoo
gdp_zoo <- Quandl("FRED/GDP",type="zoo")

# Look at the structure of gdp_zoo
str(gdp_zoo)

# You need the instrument identifier to import data from an internet data source. They can often be found on the data source website.
# Create an object containing the Pfizer ticker symbol
symbol <- "PFE"

# Use getSymbols to import the data
getSymbols(symbol)

# Look at the first few rows of data
head(PFE)

# Create a currency_pair object
currency_pair <- "GBP/CAD"

# Load British Pound to Canadian Dollar exchange rate data
getSymbols(currency_pair, src = "oanda")

# Examine object using str()
str(GBPCAD)

# Try to load data from 190 days ago
getSymbols(currency_pair, from = Sys.Date() - 190, to = Sys.Date(), src = "oanda")

# Create a series_name object
series_name <- "UNRATE"

# Load the data using getSymbols
getSymbols(series_name, src = "FRED")

# Create a quandl_code object
quandl_code <- "FRED/UNRATE"

# Load the data using Quandl
unemploy_rate <- Quandl(quandl_code)

# The quantmod package provides several helper functions to extract specific columns from an object, based on the column name. 
# The Op(), Hi(), Lo(), Cl(), Vo(), and Ad() functions can be used to extract the open, high, low, close, volume, and adjusted close 
# column, respectively.

# Extract the close column
dc_close <- Cl(DC)

# Look at the head of dc_close
head(dc_close)

# Extract the volume column
dc_volume <- Vo(DC)

# Look at the head of dc_volume
head(dc_volume)

# The quantmod package provides functions to extract a single column, and also has functions to extract specific sets of columns.
# Extract the high, low, and close columns
dc_hlc <- HLC(DC)

# Look at the head of dc_hlc
head(dc_hlc)

# Extract the open, high, low, close, and volume columns
dc_ohlcv <- OHLCV(DC)

# Look at the head of dc_ohlcv
head(dc_ohlcv)

# The getPrice() function in the quantmod package can extract any column by name by using the prefer argument. It can also extract 
# columns for a specific instrument by using the symbol argument, which is useful when an object contains several instruments with the 
# same price type.
# Download CME data for CL and BZ as an xts object
oil_data <- Quandl(code = c("CME/CLH2016", "CME/BZH2016"), type = "xts")

# Look at the column names of the oil_data object
colnames(oil_data)

# Extract the Open price for CLH2016
cl_open <- getPrice(oil_data, symbol = "CLH2016", prefer = "Open$")

# Look at January, 2016 using xts' ISO-8601 subsetting
cl_open["2016-01"]

# Sometimes you need to aggregate and/or transform raw data before you can continue your analysis. The Quandl() function allows you to
# specify common aggregations and transformations via the collapse and/or transform arguments. 
# Download quarterly CL and BZ prices
qtr_price <- Quandl(quandl_codes, type = "xts", collapse = "quarterly")

# View the high prices for both series
Hi(qtr_price)

# Download quarterly CL and BZ returns
qtr_return <- Quandl(quandl_codes, type = "xts", collapse = "quarterly", transform = "rdiff")

# View the settle price returns for both series
getPrice(qtr_return, prefer = "Settle")

# Call head on each object in data_env using eapply
data_list <- eapply(data_env, head)

# Merge all the list elements into one xts object
data_merged <- do.call(merge, data_list)

# Ensure the columns are ordered: open, high, low, close
data_ohlc <- OHLC(data_merged)

# Symbols
symbols <- c("AAPL", "MSFT", "IBM")

# Create new environment
data_env <- new.env()

# Load symbols into data_env
getSymbols(symbols,env = data_env)

# Extract the close column from each object and combine into one xts object
close_data <- do.call(merge, eapply(data_env, Cl))

# View the head of close_data0000
head(close_data)
