# The most common first step when conducting time series analysis is to display your time series dataset in a visually intuitive format. 
# The most useful way to view raw time series data in R is to use the print() command, which displays the Start, End, and Frequency of 
# your data along with the observations.
# Print the Nile dataset
print(Nile)

# List the number of observations in the Nile dataset
length(Nile)

# Display the first 10 elements of the Nile dataset
head(Nile,n=10)

# Display the last 12 elements of the Nile dataset
tail(Nile,n=12)

# The plot() command is one of the most versatile commands in R. When used with time series data, this command automatically plots your 
# data over time.
# Plot the Nile data
plot(Nile)

# Plot the Nile data with xlab and ylab arguments
plot(Nile, xlab = "Year", ylab = "River Volume (1e9 m^{3})")

# Plot the Nile data with xlab, ylab, main, and type arguments
plot(Nile, xlab = "Year", ylab = "River Volume (1e9 m^{3})",
main = "Annual River Nile Volume at Aswan, 1871-1970", type ="b")

# Plot the continuous_series using continuous time indexing
par(mfrow=c(2,1))
plot(continuous_time_index, continuous_series, type = "b")

# Make a discrete time index using 1:20 
discrete_time_index <- 1:20

# Now plot the continuous_series using discrete time indexing
plot(discrete_time_index, continuous_series, type = "b")

# The start() and end() functions return the time index of the first and last observations, respectively. 
# The time() function calculates a vector of time indices, with one element for each time index on which the series was observed.
# The deltat() function returns the fixed time interval between observations and the frequency() function returns the number of 
# observations per unit time. Finally, the cycle() function returns the position in the cycle of each observation.
# Plot AirPassengers
plot(AirPassengers)

# View the start and end dates of AirPassengers
start(AirPassengers)
end(AirPassengers)

# Use time(), deltat(), frequency(), and cycle() with AirPassengers 
time(AirPassengers)
deltat(AirPassengers)
frequency(AirPassengers)
cycle(AirPassengers)

# Sometimes there are missing values in time series data, denoted NA in R, and it is useful to know their locations. It is also 
# important to know how missing values are handled by various R functions. Sometimes we may want to ignore any missingness, but other 
# times we may wish to impute or estimate the missing values.
# Plot the AirPassengers data
plot(AirPassengers)

# Compute the mean of AirPassengers
mean(AirPassengers, na.rm = TRUE)

# Impute mean values to NA in AirPassengers
AirPassengers[85:96] <- mean(AirPassengers, na.rm = TRUE)

# Generate another plot of AirPassengers
plot(AirPassengers)

# Add the complete AirPassengers data to your plot
rm(AirPassengers)
points(AirPassengers, type = "l", col = 2, lty = 3)

# Use print() and plot() to view data_vector
print(data_vector)
plot(data_vector)

# Convert data_vector to a ts object with start = 2004 and frequency = 4
time_series <- ts(data_vector,start=2004,frequency=4)

# Use print() and plot() to view time_series
print(time_series)
plot(time_series)

# Check whether data_vector and time_series are ts objects
is.ts(data_vector)
is.ts(time_series)

# Check whether Nile is a ts object
is.ts(Nile)

# Check whether AirPassengers is a ts object
is.ts(AirPassengers)

# Check whether eu_stocks is a ts object
is.ts(eu_stocks)

# View the start, end, and frequency of eu_stocks
start(eu_stocks)
end(eu_stocks)
frequency(eu_stocks)

# Generate a simple plot of eu_stocks
plot(eu_stocks)

# Use ts.plot with eu_stocks
ts.plot(eu_stocks, col = 1:4, xlab = "Year", ylab = "Index Value", main = "Major European Stock Indices, 1991-1998")

# Add a legend to your ts.plot
legend("topleft", colnames(eu_stocks), lty = 1, col = 1:4, bty = "n")

# The logarithmic function log() is a data transformation that can be applied to positively valued time series data. It slightly 
# shrinks observations that are greater than one towards zero, while greatly shrinking very large observations. This property can 
# stabilize variability when a series exhibits increasing variability over time. It may also be used to linearize a rapid growth pattern
# over time.
# Log rapid_growth
linear_growth <- log(rapid_growth)
  
# Plot linear_growth using ts.plot()
ts.plot(linear_growth) 

# Generate the first difference of z
dz <- diff(z)
  
# Plot dz
ts.plot(dz)

# View the length of z and dz, respectively
length(z)
length(dz)

# For time series exhibiting seasonal trends, seasonal differencing can be applied to remove these periodic patterns. 
# For example, monthly data may exhibit a strong twelve month pattern. In such situations, changes in behavior from year to year may 
# be of more interest than changes from month to month, which may largely follow the overall seasonal pattern.

# When using the diff() command, the lag argument will specify the number of periods you are differencing by. In this exercise, you 
# should type diff(x, lag = 4) to generate a 4-period difference. If you're confused, you can access the help documentation by typing 
#?diff into your R console.
# Generate a diff of x with n = 4. Save this to dx
dx <- diff(x, lag = 4)
  
# Plot dx
ts.plot(dx)  

# View the length of x and dx, respectively 
length(x)
length(dx)

# The white noise (WN) model is a basic time series model. It is also a basis for the more elaborate models we will consider. 
# We will focus on the simplest form of WN, independent and identically distributed data.
# The arima.sim() function can be used to simulate data from a variety of time series models. 
# ARIMA is an abbreviation for the autoregressive integrated moving average class of models we will consider throughout this course.
# An ARIMA(p, d, q) model has three parts, the autoregressive order p, the order of integration (or differencing) d, and the 
# moving average order q. We will detail each of these parts soon, but for now we note that the ARIMA(0, 0, 0) model, i.e., 
# with all of these components zero, is simply the WN model.

# Simulate a WN model with list(order = c(0, 0, 0))
white_noise<- arima.sim(model = list(order = c(0, 0, 0)), n = 100)

# Plot the WN observations
ts.plot(white_noise)

# Simulate from the WN model with: mean = 100, sd = 10
white_noise_2 <- arima.sim(list(order = c(0, 0, 0)), n = 100, mean = 100, sd = 10)

# Plot your white_noise_2 data
ts.plot(white_noise_2)

# Fit the WN model to y using the arima command
arima(y, order = c(0, 0, 0))

# Calculate the sample mean and sample variance of y
mean(y)
var(y)

# The random walk (RW) model is also a basic time series model. It is the cumulative sum (or integration) of a mean zero white noise
# (WN) series, such that the first difference series of a RW is a WN series. Note for reference that the RW model is an ARIMA(0, 1, 0)
# model, in which the middle entry of 1 indicates that the model's order of integration is 1.

# Generate a RW model using arima.sim
random_walk <- arima.sim(model = list(order = c(0, 1, 0)), n = 100)

# Plot random_walk
ts.plot(random_walk)

# Calculate the first difference series
random_walk_diff <- diff(random_walk)

# Plot random_walk_diff
ts.plot(random_walk_diff)

# Generate a RW model with a drift uing arima.sim
rw_drift <- arima.sim(model = list(order = c(0, 1, 0)), n = 100, mean = 1)

# Plot rw_drift
ts.plot(rw_drift)

# Calculate the first difference series
rw_drift_diff <- diff(rw_drift)

# Plot rw_drift_diff
ts.plot(rw_drift_diff)

# Difference your random_walk data
rw_diff <- diff(random_walk)

# Plot rw_diff
ts.plot(rw_diff)

# Now fit the WN model to the differenced data
model_wn <- arima(rw_diff, order = c(0, 0, 0))

# Copy and paste the value of the estimated time trend (intercept) below
int_wn <- model_wn$coef

# Plot the original random_walk data
ts.plot(random_walk)

# Use abline(0, ...) to add time trend to the figure
abline(0, int_wn)

# The white noise (WN) and random walk (RW) models are very closely related. However, only the RW is always non-stationary, both with 
# and without a drift term. This is a simulation exercise to highlight the differences.

# Use arima.sim() to generate WN data
white_noise <- arima.sim(model = list(order = c(0, 0, 0)), n = 100)

# Use cumsum() to convert your WN data to RW
random_walk <- cumsum(white_noise)
  
# Use arima.sim() to generate WN drift data
wn_drift <- arima.sim(model = list(order = c(0, 0, 0)), n = 100, mean = 0.4)
  
# Use cumsum() to convert your WN drift data to RW
rw_drift <- cumsum(wn_drift)

# Plot all four data objects
plot.ts(cbind(white_noise, random_walk, wn_drift, rw_drift))


